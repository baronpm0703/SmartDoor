<style>
    /* Add hover effect color to dropdown items */
    .dropdown-item:hover {
        background-color: rgba(52, 224, 161, 0.5);
        /* Change the color as per your preference */
        color: #fff;
        /* Change the text color as needed */
    }
</style>
<header>
    <!-- place navbar here -->
    <nav class="navbar navbar-expand-sm navbar-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="/home"><span class="fw-bold" id="welcomeText">Welcome, {{account.username}}</span></a>
            <div class="btn-group dropstart">
                <img src="{{#if account.url}}{{account.url}}{{else}}/img/avt.jpg{{/if}}" alt="avatar"
                    id="avatarImage"
                    class="dropdown-toggle object-fit-contain" data-bs-toggle="dropdown" aria-expanded="false"
                    style="margin-left: auto; margin-right: 1em; border-radius: 50%; border: 3px solid rgb(52,224,161)">
                <ul class="dropdown-menu dropdown-menu-dark">
                    <li><a class="dropdown-item" href="/home/personalInfo">Personal Info</a></li>
                    <li><a class="dropdown-item" href="/home/config">User Config</a></li>
                    <li><a class="dropdown-item" href="/home/logout">Logout</a></li>
                </ul>
            </div>
        </div>
    </nav>

</header>
<main>
    <div class="container-fluid h-100">
        <div class="bg-danger container-fluid border rounded-4 my-3 w-75 h-25 {{#if (isTrue warning.Reality)}}  d-block {{else}} d-none {{/if}}"
            style="padding-top: 1em">
            <div>
                <p id="notificationText" class="text-light text-center w-100 fw-bold">Notification: Stranger Alert!!</p>
            </div>
        </div>

        <div class="container-fluid text-center w-50 my-3 ">
            <img id="streamedImage" src="{{#if (isTrue cameraState)}}{{cameraIP}}/cam-mid.jpg{{else}}{{/if}}" 
                class="object-fit-contain w-100"
                alt="Camera is turned off or Image is Loading..."
                data-ip="{{cameraIP}}/cam-mid.jpg"
            >
                {{!-- data-ip="{{cameraIP}}/cam-mid.jpg" --}}
        </div>

        <div class="container-fluid featureBlock  w-75 d-flex flex-row align-items-center bg-dark rounded-4 my-3 ">

            <div id="warningIc" class="bg-warning text-center rounded-circle iconBlock ms-1">
                <img src="/img/warning.svg" alt="warning" class="w-75 mb-1">
            </div>

            <div class="w-75 ms-2 me-1" >
                <p class="text-light w-100 m-0 fw-bold featureText" id="trigWBlock">Trigger Warning</p>
            </div>

            <button class="bg-warning rounded-4 warn-btn featureBtn">
                <span class="text-dark fw-bold featureFunctionText">
                    Warn
                </span>
            </button>
            {{#if (isTrue warning.Expectation)}}   
                <button class="ms-1 bg-warning rounded-4 off-warn-btn featureBtn">
                    <span class="text-dark fw-bold featureFunctionText" >
                        Turn Off
                    </span>
                </button>
            {{/if}}
        </div>

        {{#if (smallerThan sensorData.Ultrasonic userData.CheckingDistance)}}
            <div class="container-fluid featureBlock  w-75 d-flex flex-row align-items-center rounded-4 my-3"
                style=" background-color: rgb(52,224,161)">

                <div class="bg-dark text-center rounded-circle IcPad iconBlock ms-1">
                    <img src="/img/check.svg" alt="info" class="w-75">
                </div>

                <div class="w-75 ms-2  me-1">
                    <p class="text-dark w-100 m-0 fw-bold featureText">In Distance</p>
                </div>

                <div class="bg-dark w-25 rounded-4 d-flex justify-content-center featureBtn">
                    <span class="fw-bold featureFunctionText" 
                        style="color: rgb(52,224,161);">
                        {{convertDistance sensorData.Ultrasonic}}
                    </span>
                </div>
            </div> 
        {{else}}
            <div class="container-fluid featureBlock  w-75 d-flex flex-row align-items-center rounded-4 my-3"
                    style=" background-color: red">

                    <div class="bg-light text-center rounded-circle IcPad iconBlock ms-1">
                        <img src="/img/x.svg" alt="info" class="w-75">
                    </div>

                    <div class="w-75 ms-2  me-1">
                        <p class="text-light w-100 m-0 fw-bold featureText">Out Of Distance  </p>
                    </div>

                    <div class="bg-light w-25 rounded-4 d-flex justify-content-center featureBtn">
                        <span class="fw-bold featureFunctionText" 
                            style=" color: red;">
                            {{convertDistance sensorData.Ultrasonic}}
                        </span>
                    </div>
            </div>  
        {{/if}}
        

        <div class="container-fluid featureBlock w-75 d-flex flex-row align-items-center rounded-4 my-3"
            style=" background-color: rgb(52,224,161)">

            <div class="bg-dark text-center rounded-circle IcPad iconBlock ms-1">
                <img src="/img/Access.svg" alt="access" class="w-75">
            </div>

            <div class="w-75 ms-2 me-1">
                <p class="text-dark w-100 m-0 fw-bold featureText">Access History</p>
            </div>

            <a href="/home/accessHistory" class="bg-dark w-25 rounded-4 d-flex justify-content-center featureBtn"
                style="text-decoration: none;">
                <span class="fw-bold featureFunctionText" style="color: rgb(52,224,161);">
                    Detail
                </span>
            </a>
        </div>

        <div class="container-fluid featureBlock w-75 d-flex flex-row align-items-center rounded-4 my-3"
            style=" background-color: rgb(247,247,247)">

            <div class="bg-light text-center rounded-circle iconBlock ms-2">
                <img src="{{#if (isTrue doorData.Reality)}}/img/Door Open.svg{{else}}/img/Door Close.svg{{/if}}"
                    alt="door status" id="ic_door" class="w-100">
            </div>

            <div class="w-75 ms-2 me-3">
                <p class="text-dark w-100 m-0 fw-bold featureText" id="door_status">Actual State: {{#if
                    (isTrue doorData.Reality)}}Door Open{{else}}Door Close{{/if}}</p>
            </div>


            <div class="form-check form-switch d-flex justify-content-center" style="width: 6rem; height: 1em;">
                <input class="form-check-input w-100 h-75" type="checkbox" role="switch" id="flexSwitchCheckChecked"
                    {{#if (isTrue doorData.Reality)}}checked{{/if}}>
            </div>
        </div>

        <div class="container-fluid featureBlock w-75 d-flex flex-row align-items-center rounded-4 my-3"
            style=" background-color: rgb(247,247,247)">

            <div class="bg-light text-center rounded-circle iconBlock ms-2">
                <img src="{{#if (isTrue cameraState)}}/img/camera.svg{{else}}/img/camera-off.svg{{/if}}"
                    alt="camera status" id="camera_status_ic" class="w-100">
            </div>

            <div class="w-75 ms-2 me-3">
                <p class="text-dark w-100 m-0 fw-bold featureText" id="camera_status_text">{{#if (isTrue
                    cameraState)}}Camera Is On{{else}}Camera Is Off{{/if}}</p>
            </div>


            <div class="form-check form-switch d-flex justify-content-center" style="width: 6rem; height: 1em;">
                <input class="form-check-input w-100 h-75" type="checkbox" role="switch" id="camera_status_switch" {{#if
                    (isTrue cameraState)}}checked{{/if}}>
            </div>
        </div>

    </div>
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>

<script>
    // Connect to the WebSocket server
    const socket = io();

    // Listen for the 'dataUpdated' event
    socket.on('dataUpdated', (data) => {
        console.log('Data updated:', data);
        location.reload();
    });

</script>

{{!-- Style --}}
<style>
    @media screen and (min-width: 600px) {
        .navbar {
            background-color: black;
        }

        .navbar-brand span {
            color: rgb(52, 224, 161);
        }

        #notificationText {
            font-size: 3em;
        }

        .featureBlock {
            height: 5em;
        }

        .iconBlock {
            width: 3.2em;
            height: 3em;
        }

        #warningIc {
            padding-top: 0.2em;
        }

        .IcPad {
            padding-top: 0.4em;
        }
        .featureText{
            font-size: 2em;
        }
        .featureFunctionText {
            font-size: 1.7em;
        }
        .featureBtn {
            padding: 0.2em 0;
            line-height: 2.3em;
        }
        #avatarImage {
            width: 4em;
        }
        #welcomeText {
            font-size: 1.7em;
        }
        .warn-btn {
            width: 12em;
        }
        .off-warn-btn {
            width: 10em;
        }
    }
    @media screen and (max-width: 500px) {
        .warn-btn {
            width: 4em;
        }
        .off-warn-btn {
            width: 5em;
        }
        #welcomeText {
            font-size: 1em;
        }
        .navbar {
            background-color: black;
        }

        .navbar-brand span {
            color: rgb(52, 224, 161);
        }

        #notificationText {
            font-size: 1.2em;
        }

        .featureBlock {
            height: 4em;
        }

        .iconBlock {
            width: 2.2em;
            height: 1.8em;
        }
        .featureText{
            font-size: 1.1em;
        }

        .featureFunctionText {
            font-size: 0.7em;
        }
        .featureBtn {
            line-height: 1em;
        }
        #avatarImage {
            width: 3em;
        }
        #trigWBlock {
            font-size: 1em;
        }
    }
</style>

<script>
    // Camera Status
    var cam_switch = document.getElementById("camera_status_switch");
    if (cam_switch.checked) {
        setTimeout(updateImage, 500);
    } 
    cam_switch.addEventListener('change', async function () {
        console.log("Change");
        if (this.checked) {
            console.log("Camera On");
            var toSend = {
                cameraState: true
            }
            var On = await fetch('/home/webCam', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(toSend)
            });
        } else {
            console.log("Camera Off");
            var toSend = {
                cameraState: false
            }
            var Off = await fetch('/home/webCam', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(toSend)
            });
        }
    })

    // Door Status
    var door_switch = document.getElementById("flexSwitchCheckChecked");
    door_switch.addEventListener('change', async function () {
        console.log("Change");
        if (this.checked) {
            console.log("Open");
            var DoorStatus = {
                Expectation: true
            }
            var Close = await fetch('/home/door', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(DoorStatus)
            });

            //location.reload();
        } else {

            var door_time = document.getElementById('door-time');
            var DoorStatus = {
                Expectation: false
            }
            console.log("Close");
            var Open = await fetch('/home/door', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(DoorStatus)
            });

            //location.reload();
        }
    })

    // JavaScript code to periodically update the image
    function updateImage() {
        const imgElement = document.getElementById('streamedImage');
        const imageUrl = imgElement.dataset.ip;

        // Update the image source
        imgElement.src = imageUrl;

        // Set a timeout to update the image every 1000 milliseconds (1 second)
        setTimeout(updateImage, 1000);
    }


    // Warnning
    var off_warn_btn = document.querySelector('.off-warn-btn');
    var off_warn = {
        warn: false,
    }
    if (off_warn_btn) {
        off_warn_btn.addEventListener('click', async function () {
        var OffWarn = await fetch('/home/warn', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(off_warn)
            });
        });
    }


    var warn_btn = document.querySelector('.warn-btn');
    console.log(warn_btn);
    if (off_warn_btn) {
        // Create a MediaQueryList object
        var x = window.matchMedia("(max-width: 500px)")
        if (x.matches) {
            warn_btn.style.display = "none";
        } else {
            warn_btn.style.width = "8em";
        }
            
    }
    var warn = {
        warn: true,
    }
    if (warn_btn) {
        warn_btn.addEventListener('click', async function () {
        var Warn = await fetch('/home/warn', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(warn)
            });
        });
    }

    


</script>
